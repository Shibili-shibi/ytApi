"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const axios_1 = __importDefault(require("axios"));
const rqOpts = {
    headers: {
        'User-Agent': 'hellobiczes',
        'x-youtube-client-name': 1,
        'x-youtube-client-version': '2.20200731.02.01'
    }
};
const baseURL = 'https://www.youtube.com';
let iAPIkey = '';
/**
 * Scraps youtube playlist metadata and all its videos
 * @param url URL or ID of the playlist you want to scrap
 */
async function fetchFromPlaylist(url) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
    let test = /[?&]list=([^#\&\?]+)|^([a-zA-Z0-9-_]+)$/.exec(url);
    if (!test)
        throw Error('Invalid playlist URL or ID');
    let playlistID = test[1] || test[2];
    let videos = [];
    let ytInitialData;
    try {
        let body = (await axios_1.default.get('https://youtube.com/playlist?list=' + encodeURI(playlistID), rqOpts)).data;
        iAPIkey = (_a = /"INNERTUBE_API_KEY":"(.*?)"/.exec(body)) === null || _a === void 0 ? void 0 : _a[1];
        ytInitialData = JSON.parse(((_b = /(?:window\["ytInitialData"\])|(?:ytInitialData) =.*?({.*?});/s.exec(body)) === null || _b === void 0 ? void 0 : _b[1]) || '{}');
    }
    catch (_3) {
        throw Error('Could not fetch/parse playlist');
    }
    if (!iAPIkey)
        throw Error('Could not extract internal API key');
    if ((_c = JSON.stringify(ytInitialData.alerts)) === null || _c === void 0 ? void 0 : _c.includes("ERROR"))
        throw Error('This playlist is private or broken');
    if (!((_q = (_p = (_o = (_m = (_l = (_k = (_j = (_h = (_g = (_f = (_e = (_d = ytInitialData === null || ytInitialData === void 0 ? void 0 : ytInitialData.contents) === null || _d === void 0 ? void 0 : _d.twoColumnBrowseResultsRenderer) === null || _e === void 0 ? void 0 : _e.tabs) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.tabRenderer) === null || _h === void 0 ? void 0 : _h.content) === null || _j === void 0 ? void 0 : _j.sectionListRenderer) === null || _k === void 0 ? void 0 : _k.contents) === null || _l === void 0 ? void 0 : _l[0]) === null || _m === void 0 ? void 0 : _m.itemSectionRenderer) === null || _o === void 0 ? void 0 : _o.contents) === null || _p === void 0 ? void 0 : _p[0]) === null || _q === void 0 ? void 0 : _q.playlistVideoListRenderer))
        throw Error('Cannot find valid playlist JSON data. Is the playlist ID correct?');
    let listData = ytInitialData.contents.twoColumnBrowseResultsRenderer.tabs[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].playlistVideoListRenderer;
    let d = ytInitialData;
    let contToken = ((_w = (_v = (_u = (_t = (_s = (_r = listData === null || listData === void 0 ? void 0 : listData.contents) === null || _r === void 0 ? void 0 : _r.slice(-1)) === null || _s === void 0 ? void 0 : _s[0]) === null || _t === void 0 ? void 0 : _t.continuationItemRenderer) === null || _u === void 0 ? void 0 : _u.continuationEndpoint) === null || _v === void 0 ? void 0 : _v.continuationCommand) === null || _w === void 0 ? void 0 : _w.token) || '';
    if (listData.contents)
        videos.push(...parseVideosFromJson(listData.contents));
    if (contToken)
        videos.push(...(await getAllVideos(contToken)));
    try {
        let mf = d.microformat.microformatDataRenderer;
        let si0 = d.sidebar.playlistSidebarRenderer.items[0].playlistSidebarPrimaryInfoRenderer;
        let si1 = (_x = d.sidebar.playlistSidebarRenderer.items[1]) === null || _x === void 0 ? void 0 : _x.playlistSidebarSecondaryInfoRenderer.videoOwner.videoOwnerRenderer;
        return {
            title: mf.title,
            url: baseURL + '/playlist?list=' + listData.playlistId,
            id: listData.playlistId,
            video_count: +((_z = (_y = si0.stats[0].runs[0]) === null || _y === void 0 ? void 0 : _y.text) === null || _z === void 0 ? void 0 : _z.replace(/[^0-9]/g, '')),
            view_count: +((_1 = (_0 = si0.stats[1]) === null || _0 === void 0 ? void 0 : _0.simpleText) === null || _1 === void 0 ? void 0 : _1.replace(/[^0-9]/g, '')) || 0,
            description: mf.description,
            isUnlisted: mf.unlisted,
            isAlbum: 'albumName' in d.metadata.playlistMetadataRenderer,
            thumbnail_url: mf.thumbnail.thumbnails.pop().url.replace(/(?:&v=|&days).*/, ''),
            author: si1 && {
                name: si1.title.runs[0].text,
                url: baseURL + si1.title.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url,
                avatar_url: si1.thumbnail.thumbnails.pop().url
            },
            videos: videos
        };
    }
    catch (e) {
        throw Error('Could not parse playlist metadata: ' + ((_2 = e) === null || _2 === void 0 ? void 0 : _2.message));
    }
}
function parseVideosFromJson(videoDataArray) {
    try {
        let videos = [];
        for (let v of videoDataArray.map(v => v.playlistVideoRenderer))
            try {
                videos.push({
                    title: v.title.runs[0].text,
                    url: baseURL + '/watch?v=' + v.videoId,
                    id: v.videoId,
                    length: v.lengthText.simpleText,
                    milis_length: +v.lengthSeconds * 1000,
                    thumbnail_url: 'https://i.ytimg.com/vi/' + v.videoId + '/hqdefault.jpg',
                    author: {
                        name: v.shortBylineText.runs[0].text,
                        url: baseURL + v.shortBylineText.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url
                    }
                });
            }
            catch (_a) {
                continue;
            }
        return videos;
    }
    catch (_b) {
        throw Error('Could not parse videos from videoData JSON');
    }
}
async function getAllVideos(ajax_url, videos = []) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    try {
        let ytAppendData = (await axios_1.default.post(baseURL + '/youtubei/v1/browse?key=' + iAPIkey, { "context": { "client": { "clientName": "WEB", "clientVersion": "2.20210401.08.00" } }, "continuation": ajax_url }, rqOpts)).data;
        let contToken = (_j = (_h = (_g = (_f = (_e = (_d = (_c = (_b = (_a = ytAppendData.onResponseReceivedActions) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.appendContinuationItemsAction) === null || _c === void 0 ? void 0 : _c.continuationItems) === null || _d === void 0 ? void 0 : _d.slice(-1)) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.continuationItemRenderer) === null || _g === void 0 ? void 0 : _g.continuationEndpoint) === null || _h === void 0 ? void 0 : _h.continuationCommand) === null || _j === void 0 ? void 0 : _j.token;
        videos.push(...parseVideosFromJson(ytAppendData.onResponseReceivedActions[0].appendContinuationItemsAction.continuationItems));
        return contToken ? await getAllVideos(contToken, videos) : videos;
    }
    catch (_k) {
        throw Error('An error has occured while trying to fetch more videos');
    }
}
module.exports = fetchFromPlaylist;
//# sourceMappingURL=data:application/json;base64,